// Generated by CoffeeScript 1.7.1
(function() {
  var calculator, main;

  calculator = function() {
    var P, factorial;
    factorial = [0, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600];
    P = function(N, M) {
      if (N < M) {
        return 0;
      }
      if (N === M) {
        return factorial[N];
      }
      return factorial[N] / factorial[N - M];
    };
    return {
      calc: function(numCards, input) {
        var slotsAvail;
        slotsAvail = input.split("*").length - 1;
        return P(slotsAvail, numCards);
      }
    };
  };

  main = function(Calculator, $http) {
    var vm;
    vm = this;
    vm.sourceFile = "http://dmr5j7qv7f30s.cloudfront.net/problem1input.txt?key=f768a18881f272bc3bcab4ea94c03604";
    vm.solveProb1 = function() {
      vm.numCards = 5;
      $http({
        method: 'GET',
        url: vm.sourceFile
      }).then(function(response) {
        var c, char, cols, count, index, r, rows, _i, _j, _k, _len, _len1, _len2, _ref;
        vm.inputData = response.data;
        rows = vm.inputData.split('\n');
        cols = [];
        index = 0;
        _ref = vm.inputData;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          char = _ref[_i];
          if (char === '\n') {
            index = 0;
          } else {
            if (!cols[index]) {
              cols[index] = "";
            }
            cols[index] += char;
            index++;
          }
        }
        count = 0;
        for (_j = 0, _len1 = rows.length; _j < _len1; _j++) {
          r = rows[_j];
          count += Calculator.calc(vm.numCards, r);
        }
        for (_k = 0, _len2 = cols.length; _k < _len2; _k++) {
          c = cols[_k];
          count += Calculator.calc(vm.numCards, c);
        }
        vm.count = count;
      });
    };
    vm.prob2 = {
      numOfCandidateCards: 1,
      budget: 2912,
      debug: false
    };
    vm.solveProb2 = function() {
      var calc;
      calc = function(totalCards) {
        var Generation, Overhead, cardsLeft, cost, i, _i, _ref;
        vm.prob2.debugOut = [];
        Generation = [9, 10, 21, 20, 7, 11, 4, 15, 7, 7, 14, 5, 20, 6, 29, 8, 11, 19, 18, 22, 29, 14, 27, 17, 6, 22, 12, 18, 18, 30];
        Overhead = [21, 16, 19, 26, 26, 7, 1, 8, 17, 14, 15, 25, 20, 3, 24, 5, 28, 9, 2, 14, 9, 25, 15, 13, 15, 9, 6, 20, 27, 22];
        cost = 0;
        for (i = _i = 0, _ref = totalCards - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          cardsLeft = totalCards - 1 - i;
          cost += Generation[i];
          cost += Overhead[i] * cardsLeft;
          vm.prob2.debugOut[i] = {
            card: i,
            generation: Generation[i],
            overhead: Overhead[i],
            overheadMultiplier: cardsLeft,
            cost: Generation[i] + Overhead[i] * cardsLeft,
            totalCost: cost
          };
        }
        return cost;
      };
      vm.prob2.totalCost = calc(vm.prob2.numOfCandidateCards);
    };
    vm.solveProb2();
  };

  angular.module('wildcard', []).service('Calculator', calculator).controller('MainCtrl', main);

}).call(this);
